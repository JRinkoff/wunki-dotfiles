" Vim configuration file by Petar Radosevic

set cmdheight=2             " lower command line two lines high
set nocompatible            " use vim defaults
set encoding=utf-8          " utf-8 encoding
set fileencoding=utf-8      " save files as utf-8
set bg=dark                 " dark background
syntax on                   " enable syntax highlighting

" Vundle for managing bundles
filetype off            " don't detect the filetype, required for vundle
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Bundle 'gmarik/vundle'
Bundle 'tpope/vim-fugitive'
Bundle 'kien/ctrlp.vim'
Bundle 'Lokaltog/vim-powerline'
Bundle 'sjl/badwolf'
Bundle 'ack.vim'
Bundle 'scrooloose/nerdtree'
Bundle 'commentary.vim'
Bundle 'surround.vim'
Bundle 'VimClojure'
filetype plugin indent on 

" GUI
if has("gui_running")
  if has('mac')
    set guifont=Ubuntu\ Mono:h18
  else
    set guifont=Ubuntu\ Mono\ for\ Powerline\ 13
  endif
  set guioptions-=e
  set guioptions-=T
  set guioptions-=m
  set guioptions-=r
  set guioptions-=L
  set guioptions-=b
  set guioptions+=a
  set guioptions+=c
  set novisualbell        " please, no visuals
  set anti                " anti-aliasing
  set mousehide           " hide the mouse when typing 
  colorscheme badwolf
else
  " 256 colors setting
  set t_Co=256
  set mouse=a
  set ttymouse=xterm
  set termencoding=utf-8
  colorscheme badwolf
endif

" Editor configuration
if has('mac')
  set shell=/usr/local/bin/zsh
else
  set shell=/usr/bin/zsh
endif
set showmatch               " show matching brackets (), {}' []
set showcmd                 " show command
set modelines=0             " don't use modelines
set ignorecase              " case-insensitive search
set smartcase               " upper-case sensitive search
set laststatus=2            " occasions to show status line, 2=always.
set hidden                  " move buffer to background without saving
set wrap                    " set long-line wrapping
set textwidth=80            " disable automatic text-width
set history=1000            " more history
set shortmess=atI           " shorten confirmation messages
set bs=2                    " fix backspace in FreeBSD
set scrolloff=3             " keep 3 lines below/above cursor
set showmode                " shows the mode i'm currently in
set showcmd                 " shows partial command in the last line
set ttyfast                 " improves remote connections
set ruler                   " show the line and column number of the cursor
set backspace=indent,eol,start
"set relativenumber         " show line numbering relative to current position
set nonumber                " show line numbering
set undofile                " create undofiles
set formatoptions=qrn1
set cursorline              " show me the line where the cursor is

" Ignore these files in netrw
let g:netrw_list_hide= '.*\.swp$,.*\~$,.*\.pyc$'

" Use normal regular expressions
nnoremap / /\v
vnoremap / /\v

" ` is more useful than ' but less accessible.
nnoremap ' `
nnoremap ` '

" Bash-like filename completion
set wildmenu
set wildmode=list:longest
set wildignore=*.o,*.fasl,*.tmp,.git,*.pyc,*.jpg,*.gif,*.png,*.mo

" Look for the file in the current directory, then south until you reach home.
set tags=tags;~/

" Backup settings
set undodir=~/.vim/tmp/undo//     " undo files
set backupdir=~/.vim/tmp/backup// " backups
set directory=~/.vim/tmp/swap//   " swap files
set backup                        " enable backups
set noswapfile                    " no swapping

" Faster scrolling
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" Whitespace
set nowrap
set tabstop=4                     " tab width is 4 spaces
set shiftwidth=4                  " indent is also with 4 spaces
set expandtab                     " expand tabs to spaces
set listchars=tab:▸\ ,trail:·,eol:¬

let mapleader=','

" Toggle whitespace invisibles
nmap <leader>l :set list!<CR>

" Powerline
if has("gui_running")
  let g:Powerline_symbols = 'fancy'
endif
let g:Powerline_cache_enabled = 1

" All the things I want to ignore
" Clojure/Leiningen
set wildignore+=classes
set wildignore+=lib

" Markdown detection
autocmd BufNewFile,BufReadPost *.mkd,*.markdown,*.md set filetype=markdown

" Textile settings
au BufRead *.tex set tw=79

" Mutt settings
au BufRead ~/.mutt/tmp/mutt-* set tw=72 formatoptions=tcql

" C settings
au FileType C setlocal shiftwidth=4 tabstop=4 softtabstop=4 cindent

" RestructuredText
augroup rst
  autocmd BufRead *.rst set ai tw=79 spell filetype=rst formatoptions=tcroqn2 comments=n:>
augroup END

" JSON
au! BufRead,BufNewFile *.json setfiletype json 

" Quick edit
nnoremap <leader>ev :vsplit $MYVIMRC<cr>

" Shortcuts
map <C-i> gqip
noremap <f1> :bprev!<cr>
noremap <f2> :bnext!<cr>
noremap <f3> :set nu!<cr>
noremap <f4> :set relativenumber!<cr>
nnoremap j gj
nnoremap k gk

" Fugitive
nnoremap <leader>gd :Gdiff<cr>
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gw :Gwrite<cr>
nnoremap <leader>ga :Gadd<cr>
nnoremap <leader>gb :Gblame<cr>
nnoremap <leader>gco :Gcheckout<cr>
nnoremap <leader>gci :Gcommit<cr>
nnoremap <leader>gm :Gmove<cr>
nnoremap <leader>gr :Gremove<cr>

" Switch to alternate file
map <C-Tab> :bnext<cr>
map <C-S-Tab> :bprevious<cr>

" Haskell settings
au BufEnter *.hs compiler ghc
let g:haddock_browser = "open"
let g:haddock_browser_callformat = "%s %s"
let g:ghc="/usr/local/bin/ghc"
let g:haddock_docdir="/usr/local/share/doc/ghc/html/"

" Remove .py whitespace
autocmd BufWritePre *.py :%s/\s\+$//e

" Badwolf theme settings
let g:badwolf_darkgutter = 1

" NerdTree
noremap  <F2> :NERDTreeToggle<cr>
inoremap <F2> <esc>:NERDTreeToggle<cr>
let NERDTreeHighlightCursorline = 1
let NERDTreeIgnore = ['.vim$', '\~$', '.*\.pyc$', 'pip-log\.txt$', 'whoosh_index']
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let NERDChristmasTree = 1
let NERDTreeChDirMode = 2
let NERDTreeMapJumpFirstChild = 'gK'

" Commentary
nmap <leader>c <Plug>CommentaryLine
xmap <leader>c <Plug>Commentary

augroup plugin_commentary
    au!
    au FileType htmldjango setlocal commentstring={#\ %s\ #}
    au FileType clojurescript setlocal commentstring=;\ %s
    au FileType lisp setlocal commentstring=;\ %s
    au FileType puppet setlocal commentstring=#\ %s
    au FileType fish setlocal commentstring=#\ %s
augroup END

" Clojure
let g:vimclojure#WantNailgun = 1          " enable nailgun server for repl
let g:vimclojure#SplitPos = "bottom"      " open repl at the bottom
let g:vimclojure#SplitSize = 10           " size in lines of the repl window
let g:vimclojure#HighlightBuiltins = 1    " highlight Clojure keywords
let g:vimclojure#ParenRainbow = 1         " enable colored parenthesis


