" Vim configuration file by Petar Radosevic

set nocompatible            " use vim defaults
set cmdheight=2             " lower command line two lines high
set encoding=utf-8          " utf-8 encoding
set fileencoding=utf-8      " save files as utf-8
set bg=dark                 " dark background
syntax on                   " enable syntax highlighting

" Vundle for managing bundles
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
Bundle 'gmarik/vundle'

" Essentials
Bundle 'kien/ctrlp.vim'
Bundle 'tpope/vim-fugitive'
Bundle 'ack.vim'
Bundle 'commentary.vim'
Bundle 'surround.vim'
Bundle 'godlygeek/tabular'
Bundle 'vim-orgmode'
Bundle 'tpope/vim-speeddating'
Bundle 'Lokaltog/vim-easymotion'

" Looks
Bundle 'Lokaltog/vim-powerline'
Bundle 'sjl/badwolf'
Bundle 'altercation/vim-colors-solarized'

" Clojure
Bundle 'tpope/vim-foreplay'
Bundle 'tpope/vim-classpath'
Bundle 'guns/vim-clojure-static'
Bundle 'kien/rainbow_parentheses.vim'

" Haskell
Bundle 'lukerandall/haskellmode-vim'
Bundle 'Twinside/vim-syntax-haskell-cabal'

" Rust
Bundle 'wting/rust.vim'

" Gist
Bundle 'mattn/webapi-vim'
Bundle 'mattn/gist-vim'

" Erlang
Bundle 'jimenezrick/vimerl'

" Fish shell syntax
Bundle 'aliva/vim-fish'

" CFEngine
Bundle 'neilhwatson/vim_cf3'

filetype plugin indent on 

" GUI
if has("gui_running")
  if has('mac')
    set guifont=Ubuntu\ Mono:h18
  else
    set guifont=Ubuntu\ Mono\ for\ Powerline\ 13
  endif
  set guioptions-=e
  set guioptions-=T
  set guioptions-=m
  set guioptions-=r
  set guioptions-=L
  set guioptions-=b
  set guioptions+=a
  set guioptions+=c
  set novisualbell        " please, no visual bell
  set anti                " anti-aliasing
  set mousehide           " hide the mouse when typing
  colorscheme Tomorrow-Night
else
  " 256 colors setting
  set t_Co=256
  set mouse=a
  set ttymouse=xterm
  set termencoding=utf-8
  colorscheme Tomorrow-Night
endif

" Editor configuration
set shell=/bin/bash
set showmatch               " show matching brackets (), {}' []
set showcmd                 " show command
set modelines=0             " don't use modelines
set ignorecase              " case-insensitive search
set smartcase               " upper-case sensitive search
set laststatus=2            " occasions to show status line, 2=always.
set hidden                  " move buffer to background without saving
set wrap                    " set long-line wrapping
set textwidth=80            " disable automatic text-width
set history=1000            " more history
set shortmess=atI           " shorten confirmation messages
set bs=2                    " fix backspace in FreeBSD
set scrolloff=3             " keep 3 lines below/above cursor
set noshowmode              " no need for the mode, powerline shows it
set showcmd                 " shows partial command in the last line
set ttyfast                 " improves remote connections
set ruler                   " show the line and column number of the cursor
set backspace=indent,eol,start
set number                " show line numbering
set undofile                " create undofiles
set formatoptions=qrn1
set cursorline              " show me the line where the cursor is
set nofoldenable            " don't do any folding for now

" Ignore these files in netrw
let g:netrw_list_hide= '.*\.swp$,.*\~$,.*\.pyc$'

" Use normal regular expressions
nnoremap / /\v
vnoremap / /\v

" ` is more useful than ' but less accessible.
nnoremap ' `
nnoremap ` '

" Bash-like filename completion
set wildmenu
set wildmode=list:longest

" Ignore these things
set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX
set wildignore+=*.pyc                            " Python byte code
set wildignore+=*.orig                           " Merge resolution files
set wildignore+=classes                          " java/clojure classes
set wildignore+=lib                              " library files
set wildignore+=cabal-dev                        " cabal
set wildignore+=dist                             " cabal distrubition

" Look for the file in the current directory, then south until you reach home.
set tags=tags;~/

" Only show the cursorline on the active window 
augroup cline
    au!
    au WinLeave,InsertEnter * set nocursorline
    au WinEnter,InsertLeave * set cursorline
augroup END

" Backup settings
set undodir=~/.vim/tmp/undo//     " undo files
set backupdir=~/.vim/tmp/backup// " backups
set directory=~/.vim/tmp/swap//   " swap files
set backup                        " enable backups
set noswapfile                    " no swapping

" Faster scrolling
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" Whitespace
set nowrap
set tabstop=4                     " tab width is 4 spaces
set shiftwidth=4                  " indent is also with 4 spaces
set expandtab                     " expand tabs to spaces

" Change mapleader to comma
let mapleader = ","
let maplocalleader = "\\"

" Toggle whitespace invisibles
nmap <leader>l :set list!<CR>

" Powerline
let g:Powerline_symbols = 'fancy'
let g:Powerline_cache_enabled = 1

" Things to ignore
set wildignore+=classes
set wildignore+=lib
set wildignore+=dist
set wildignore+=cabal-dev

" Markdown detection
autocmd BufNewFile,BufReadPost *.mkd,*.markdown,*.md set filetype=markdown

" Textile settings
au BufRead *.tex set tw=79

" Mutt settings
au BufRead ~/.mutt/tmp/mutt-* set tw=72 formatoptions=tcql

" C settings
au FileType C setlocal shiftwidth=4 tabstop=4 softtabstop=4 cindent

" RestructuredText
augroup rst
  autocmd BufRead *.rst set ai tw=79 spell filetype=rst formatoptions=tcroqn2 comments=n:>
augroup END

" JSON
au! BufRead,BufNewFile *.json setfiletype json 

" CFEngine
au! BufRead,BufNewFile *.cf setfiletype cf3

" Quick edit
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>et :vsplit ~/org/today.org<cr>

" Line numbers
noremap <f3> :set nu!<cr>
noremap <f4> :set relativenumber!<cr>

" Go up/down a display line, instead of actual line
nnoremap j gj
nnoremap k gk

" Formatting
nnoremap Q gqip
vnoremap Q gq

" CtrlP for Buffer switching
map <C-b> :CtrlPBuffer<CR>

" Fugitive
nnoremap <leader>gd :Gdiff<cr>
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gw :Gwrite<cr>
nnoremap <leader>ga :Gadd<cr>
nnoremap <leader>gb :Gblame<cr>
nnoremap <leader>gco :Gcheckout<cr>
nnoremap <leader>gci :Gcommit<cr>
nnoremap <leader>gm :Gmove<cr>
nnoremap <leader>gr :Gremove<cr>

" Org-mode
augroup ft_org
    au!

    au Filetype org nmap <buffer> Q vahjgq
augroup END

" Haskell settings
au BufEnter *.hs compiler ghc
let g:haddock_browser = "open"
let g:haddock_browser_callformat = "%s %s"
let g:ghc="/usr/local/bin/ghc"
let g:haddock_docdir="/usr/local/share/doc/ghc/html/"

" Badwolf theme settings
let g:badwolf_darkgutter = 1

" Commentary
nmap <leader>c <Plug>CommentaryLine
xmap <leader>c <Plug>Commentary

augroup plugin_commentary
    au!
    au FileType htmldjango setlocal commentstring={#\ %s\ #}
    au FileType clojurescript setlocal commentstring=;\ %s
    au FileType lisp setlocal commentstring=;\ %s
    au FileType rust setlocal commentstring=//\ %s
augroup END

" Chicken scheme
let g:is_chicken=1
setl lispwords+=let-values,condition-case,with-input-from-string
setl lispwords+=with-output-to-string,handle-exceptions,call/cc,rec,receive
setl lispwords+=call-with-output-file

