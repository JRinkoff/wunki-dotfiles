" Vim configuration file by Petar Radosevic

set nocompatible            " use vim defaults
set cmdheight=2             " lower command line two lines high
set modifiable              " needed for vimpager
set encoding=utf-8          " utf-8 encoding
set fileencoding=utf-8      " save files as utf-8
set bg=dark                 " dark background
syntax on                   " enable syntax highlighting

if has('vim_starting')
  set nocompatible

  " Required:
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoNeoBundle manage NeoNeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

if neobundle#has_cache()
  NeoBundleLoadCache
else
  " Essentials
  NeoBundle 'tpope/vim-eunuch'
  NeoBundle 'tpope/vim-repeat'
  NeoBundle 'tpope/vim-fugitive'
  NeoBundle 'gregsexton/gitv'
  NeoBundle 'tpope/vim-unimpaired'
  NeoBundle 'tpope/vim-obsession'
  NeoBundle 'rking/ag.vim'
  NeoBundle 'commentary.vim'
  NeoBundle 'surround.vim'
  NeoBundle 'godlygeek/tabular'
  NeoBundle 'tpope/vim-speeddating'
  NeoBundle 'Lokaltog/vim-easymotion'
  NeoBundle 'scrooloose/syntastic'
  NeoBundle 'scrooloose/nerdtree'
  NeoBundle 'sjl/gundo.vim'
  NeoBundle 'drmikehenry/vim-fontsize'
  NeoBundle 'jiangmiao/auto-pairs'
  NeoBundle 'dhruvasagar/vim-table-mode'
  NeoBundle 'bronson/vim-trailing-whitespace'

  " File browsing
  NeoBundle 'kien/ctrlp.vim'

  " Looks
  NeoBundle 'itchyny/lightline.vim'
  NeoBundle 'cocopon/lightline-hybrid.vim'
  NeoBundle 'w0ng/vim-hybrid'
  NeoBundle 'chriskempson/base16-vim'

  " Websites
  NeoBundle 'othree/html5.vim'

  " Only install these scripts on my local machine
  if hostname() == "macbook.wunki.org" || hostname() == "ubuntu"

    " Clojure
    NeoBundle 'tpope/vim-fireplace'
    NeoBundle 'tpope/vim-leiningen'
    NeoBundle 'tpope/vim-projectionist'
    NeoBundle 'guns/vim-clojure-static'
    NeoBundle 'guns/vim-slamhound'
    NeoBundle 'guns/vim-clojure-highlight'
    NeoBundle 'kien/rainbow_parentheses.vim'
    NeoBundle 'paredit.vim'

    " Haskell
    NeoBundle 'travitch/hasksyn'
    NeoBundle 'Shougo/vimproc.vim'
    NeoBundle 'eagletmt/ghcmod-vim'
    NeoBundle 'twinside/vim-hoogle'

    " Scala
    NeoBundle 'derekwyatt/vim-scala'

    " Go
    if $GOPATH != ""
        NeoBundle "fatih/vim-go"
        NeoBundle "benmills/vim-golang-alternate"
    endif

    " Rust
    NeoBundle 'wting/rust.vim'
    NeoBundle 'cespare/vim-toml'

    " Racket
    NeoBundle 'wlangstroth/vim-racket'

    " Erlang
    NeoBundle 'jimenezrick/vimerl'

    " Fish shell syntax
    NeoBundle 'aliva/vim-fish'

    " Provisioning
    NeoBundle 'saltstack/salt-vim'
    NeoBundle 'chase/vim-ansible-yaml'
    NeoBundle 'ekalinin/Dockerfile.vim'
    NeoBundle 'Glench/Vim-Jinja2-Syntax'

    " Python
    NeoBundle 'klen/python-mode'
    NeoBundle 'lambdalisue/vim-pyenv'

    " Github
    NeoBundle "jaxbot/github-issues.vim"
    NeoBundle 'mattn/webapi-vim'
    NeoBundle 'mattn/gist-vim'
  endif
endif

call neobundle#end()

filetype plugin indent on

NeoBundleCheck

" GUI
if has("gui_running")
  if has('mac')
    set guifont=Ubuntu\ Mono:h17
  else
    set guifont=Ubuntu\ Mono\ derivative\ Powerline\ 13
  endif
  set guioptions-=e
  set guioptions-=T
  set guioptions-=m
  set guioptions-=r
  set guioptions-=L
  set guioptions-=b
  set guioptions+=a
  set guioptions+=c
  set novisualbell        " please, no visual bell
  set noeb                " don't notify me of errors
  set anti                " anti-aliasing
  set mousehide           " hide the mouse when typing
else
  " 256 colors setting
  set t_Co=256
  set mouse=a
  set ttymouse=xterm
  set termencoding=utf-8
endif

" Theme
let g:rehash256 = 1
let g:molokai_original = 1
let g:zenburn_disable_Label_underline = 1
colorscheme zenburn

" Find bash
if executable('/bin/bash')
  set shell=/bin/bash
elseif executable('/usr/local/bin/bash')
  set shell=/usr/local/bin/bash
elseif executable('/usr/bin/bash')
  set shell=/usr/bin/bash
else
  set shell=/bin/sh
endif

set showmatch               " show matching brackets (), {}' []
set showcmd                 " show command
set modelines=0             " don't use modelines
set ignorecase              " case-insensitive search
set smartcase               " upper-case sensitive search
set laststatus=2            " occasions to show status line, 2=always.
set hidden                  " move buffer to background without saving
set wrap                    " set long-line wrapping
set textwidth=80            " disable automatic text-width
set history=1000            " more history
set shortmess=atI           " shorten confirmation messages
set bs=2                    " fix backspace in FreeBSD
set scrolloff=3             " keep 3 lines below/above cursor
set noshowmode              " no need for the mode, airline shows it
set showcmd                 " shows partial command in the last line
set ttyfast                 " improves remote connections
set ruler                   " show the line and column number of the cursor
set backspace=indent,eol,start
set nonumber                " don't show line numbering
set undofile                " create undofiles
set formatoptions=qrn1
set cursorline              " show me the line where the cursor is
set nofoldenable            " don't do any folding for now
set guicursor+=a:blinkon0   " don't blink the cursor please

" Enable a .vimrc per project
set exrc                    " enable per-directory .vimrc files
set secure                  " disable unsafe commands in local .vimrc files

" Dictionary on the mac
if has('mac')
  nmap <silent> <Leader>d :!open dict://<cword><CR><CR>
endif

" Ignore these files in netrw
let g:netrw_list_hide= '.*\.swp$,.*\~$,.*\.pyc$'

" Use normal regular expressions
nnoremap / /\v
vnoremap / /\v

" Bash-like filename completion
set wildmenu
set wildmode=list:longest

" Ignore these things
set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX
set wildignore+=*.pyc                            " Python byte code
set wildignore+=*.orig                           " Merge resolution files
set wildignore+=*.beam                           " Erlang object code
set wildignore+=classes                          " java/clojure classes
set wildignore+=lib                              " library files
set wildignore+=cabal-dev                        " cabal
set wildignore+=dist                             " cabal distrubition

" Jumping around
set tags=tags;/,codex.tags;/

" Only show the cursorline on the active window
augroup cline
  au!
  au WinLeave,InsertEnter * set nocursorline
  au WinEnter,InsertLeave * set cursorline
augroup END

" Backup settings
set undodir=~/.vim/tmp/undo//     " undo files
set backupdir=~/.vim/tmp/backup// " backups
set directory=~/.vim/tmp/swap//   " swap files
set backup                        " enable backups
set noswapfile                    " no swapping

" NerdTree
map <C-n> :NERDTreeToggle<CR>
let NERDTreeIgnore=['\~$', '\.pyc', '\.swp$', '\.git', '\.hg', '\.svn',
      \ '\.ropeproject', '\.o', '\.bzr', '\.ipynb_checkpoints', '__pycache__',
      \ '\.egg$', '\.egg-info$', '\.tox$', '\.idea$', '\.sass-cache',
      \ '\.env*$', '\.env[0-9]$', '\.coverage$']

" Faster scrolling
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" Whitespace
set nowrap
set tabstop=4                     " tab width is 4 spaces
set shiftwidth=4                  " indent is also with 4 spaces
set expandtab                     " expand tabs to spaces

" Change mapleader to comma
let mapleader = ","
let maplocalleader = "_"

" Toggle whitespace invisibles
nmap <leader>l :set list!<CR>

" Go settings
au BufNewFile,BufRead *.go setlocal noet ts=4 sw=4 sts=4
let g:go_highlight_trailing_whitespace_error = 0
let g:go_auto_type_info = 0

au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <Leader>i <Plug>(go-info)
au FileType go nmap <Leader>d <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>gb <Plug>(go-doc-browser)
au FileType go nmap gd <Plug>(go-def)

" Markdown detection
autocmd BufNewFile,BufReadPost *.mkd,*.markdown,*.md set filetype=markdown

" Textile settings
au BufRead *.tex set tw=79

" Mutt settings
au BufRead ~/.mutt/tmp/mutt-* set tw=72 formatoptions=tcql

" C settings
au FileType C setlocal shiftwidth=4 tabstop=4 softtabstop=4 cindent

" RestructuredText
augroup rst
  autocmd BufRead *.rst set ai tw=79 spell filetype=rst formatoptions=tcroqn2 comments=n:>
augroup END

" JSON
au! BufRead,BufNewFile *.json setfiletype json

" Quickly escape to normal mode
inoremap hh <ESC>

" Quick edit
nnoremap <leader>ev :vsplit $MYVIMRC<cr>

" Line numbers
noremap <f3> :set nu!<cr>
noremap <f4> :set relativenumber!<cr>

" Go up/down a display line, instead of actual line
nnoremap j gj
nnoremap k gk

" Formatting
nnoremap Q gqip
vnoremap Q gq

" Ctrlp
let g:ctrlp_working_path_mode = 0
nnoremap <silent> <C-b> :CtrlPBuffer<cr>

" Fugitive
nnoremap <leader>gd :Gdiff<cr>
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gw :Gwrite<cr>
nnoremap <leader>ga :Gadd<cr>
nnoremap <leader>gb :Gblame<cr>
nnoremap <leader>gco :Gcheckout<cr>
nnoremap <leader>gci :Gcommit<cr>
nnoremap <leader>gm :Gmove<cr>
nnoremap <leader>gr :Gremove<cr>
nnoremap <leader>gv :Gitv<cr>
nnoremap <leader>gp :Git push<cr>

" Org-mode
augroup ft_org
  au!
  au Filetype org nmap <buffer> Q vahjgq
augroup END

" Haskell settings
let g:haddock_browser = "firefox"
let g:haddock_browser_callformat = "%s %s"
let g:ghc="/usr/bin/ghc"
let g:haddock_docdir="/usr/share/doc/ghc/html/"

" Badwolf theme settings
let g:badwolf_darkgutter = 1

" Commentary
nmap <leader>c <Plug>CommentaryLine
xmap <leader>c <Plug>Commentary

augroup plugin_commentary
  au!
  au FileType htmldjango setlocal commentstring={#\ %s\ #}
  au FileType clojurescript setlocal commentstring=;\ %s
  au FileType lisp setlocal commentstring=;\ %s
  au FileType rust setlocal commentstring=//\ %s
  au FileType cf3 setlocal commentstring=\#\ %s
augroup END

" Chicken scheme
let g:is_chicken=1
setl lispwords+=let-values,condition-case,with-input-from-string
setl lispwords+=with-output-to-string,handle-exceptions,call/cc,rec,receive
setl lispwords+=call-with-output-file

" Sessions
set ssop-=options    " do not store global and local values in a session
set ssop-=folds      " do not store folds

" Completion
set complete=.,w,b,u,t
set completeopt=menu,menuone

" Clojure
let g:clojure_align_multiline_strings = 1

" Erlang
au BufRead,BufNewFile rebar.config set filetype=erlang

" Python
let g:pymode_rope_complete_on_dot = 0

" Syntastic
let g:syntastic_echo_current_error = 0
let g:syntastic_enable_highlighting = 0
let g:syntastic_always_populate_loc_list = 1

" Github issues
let g:github_issues_no_omni = 1

" Passwords
let passfile = $HOME."/.vimpass"
if filereadable($passfile)
  source $passfile
end

if has('mac')
  set macmeta               " enable meta key in macvim
endif

" Lightline
let g:lightline = {
      \ 'colorscheme': 'jellybeans',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'fugitive', 'filename' ] ]
      \ },
      \ 'component_function': {
      \   'fugitive': 'MyFugitive',
      \   'readonly': 'MyReadonly',
      \   'modified': 'MyModified',
      \   'filename': 'MyFilename'
      \ },
      \ 'separator': { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '', 'right': '' }
      \ }

function! MyModified()
  if &filetype == "help"
    return ""
  elseif &modified
    return "+"
  elseif &modifiable
    return ""
  else
    return ""
  endif
endfunction

function! MyReadonly()
  if &filetype == "help"
    return ""
  elseif &readonly
    return "Lock"
  else
    return ""
  endif
endfunction

function! MyFugitive()
  if exists("*fugitive#head")
    let _ = fugitive#head()
    return strlen(_) ? '[git] '._ : ''
  endif
  return ''
endfunction

function! MyFilename()
  return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
       \ ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
       \ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction
