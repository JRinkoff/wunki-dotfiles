" Vim configuration file by Petar Radosevic

set nocompatible            " use vim defaults
set cmdheight=2             " lower command line two lines high
set modifiable              " needed for vimpager
set encoding=utf-8          " utf-8 encoding
set fileencoding=utf-8      " save files as utf-8
set bg=light                " light background
set nocompatible
syntax on                   " enable syntax highlighting
filetype plugin indent on

call plug#begin('~/.vim/plugged')

" Essentials
Plug 'tpope/vim-eunuch'                                  " unix helper commands
Plug 'tpope/vim-repeat'                                  " make the . command available to more plugins
Plug 'tpope/vim-fugitive'                                " git wrapper
Plug 'tpope/vim-unimpaired'                              " bracket mappings for easy jumping
Plug 'tpope/vim-obsession'                               " better vim sessions
Plug 'rking/ag.vim'                                      " silver surfer
Plug 'commentary.vim'                                    " comment mappings
Plug 'surround.vim'                                      " surrond commands
Plug 'godlygeek/tabular'                                 " easy indenting
Plug 'tpope/vim-speeddating'                             " increase time and numbers
Plug 'Lokaltog/vim-easymotion'                           " move by selecting a letter
Plug 'scrooloose/syntastic'                              " syntax checker
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }  " sidebar tree
Plug 'mbbill/undotree'                                   " easy undoing
Plug 'jiangmiao/auto-pairs'                              " pair parenthesis, brackend and quotes
Plug 'dhruvasagar/vim-table-mode', { 'for': 'markdown' } " table creation in markdown
Plug 'bronson/vim-trailing-whitespace'                   " remove trailing whitespace
Plug 'majutsushi/tagbar'                                 " sidebar to jump to regions
Plug 'vimwiki'                                           " personal wiki
Plug 'airblade/vim-gitgutter'                            " display changes in the gutter
Plug 'Shougo/neocomplete.vim'                            " autocompletion

" Github
Plug 'mattn/webapi-vim'
Plug 'mattn/gist-vim'                                    " gists

" File browsing
Plug 'kien/ctrlp.vim'

" Looks
Plug 'jnurmine/Zenburn'
Plug 'itchyny/lightline.vim'

" Websites
Plug 'othree/html5.vim', { 'for': 'html' }

" Clojure
Plug 'tpope/vim-fireplace', { 'for': 'clojure' }
Plug 'tpope/vim-leiningen', { 'for': 'clojure' }
Plug 'tpope/vim-projectionist', { 'for': 'clojure' }
Plug 'guns/vim-clojure-static', { 'for': 'clojure' }
Plug 'guns/vim-slamhound', { 'for': 'clojure' }
Plug 'guns/vim-sexp', { 'for': 'clojure' }
Plug 'tpope/vim-sexp-mappings-for-regular-people', { 'for': 'clojure' }
Plug 'kien/rainbow_parentheses.vim', { 'for': ['clojure', 'scheme']  }

" Haskell
Plug 'travitch/hasksyn', { 'for': 'haskell' }
Plug 'Shougo/vimproc.vim', { 'do': 'make', 'for': 'haskell' }
Plug 'eagletmt/ghcmod-vim', { 'for': 'haskell' }
Plug 'twinside/vim-hoogle', { 'for': 'haskell' }
Plug 'nbouscal/vim-stylish-haskell', { 'for': 'haskell' }

" Go
Plug 'fatih/vim-go', { 'for': 'go' }
Plug 'benmills/vim-golang-alternate', { 'for': 'go' }

" Rust
Plug 'wting/rust.vim', { 'for': 'rust' }
Plug 'cespare/vim-toml', { 'for': 'toml' }

" Racket
Plug 'wlangstroth/vim-racket', { 'for': 'racket' }

" Erlang
Plug 'jimenezrick/vimerl', { 'for': 'erlang' }

" Fish shell syntax
Plug 'aliva/vim-fish', { 'for': 'fish' }

" Provisioning
Plug 'saltstack/salt-vim', { 'for': 'sls' }
Plug 'chase/vim-ansible-yaml', { 'for': 'ansible' }
Plug 'ekalinin/Dockerfile.vim', { 'for': 'Dockerfile' }
Plug 'Glench/Vim-Jinja2-Syntax'

" Python
Plug 'klen/python-mode', { 'for': 'python' }
Plug 'davidhalter/jedi-vim', { 'for': 'python' }
Plug 'lambdalisue/vim-pyenv', { 'for': 'python' }

call plug#end()

" GUI
if has("gui_running")
    if has('mac')
        set guifont=Fira\ Mono:h14
    else
        set guifont=Ubuntu\ Mono\ 14
    endif
    set guioptions-=e
    set guioptions-=T
    set guioptions-=m
    set guioptions-=r
    set guioptions-=L
    set guioptions-=b
    set guioptions+=a
    set guioptions+=c
    set novisualbell        " please, no visual bell
    set noeb                " don't notify me of errors
    set anti                " anti-aliasing
    set mousehide           " hide the mouse when typing
else
    " 256 colors setting
    set t_Co=256
    set mouse=a
    set ttymouse=xterm
    set termencoding=utf-8
endif

" Theme
let g:rehash256 = 1
let g:molokai_original = 1
let g:zenburn_disable_Label_underline = 1
colors zenburn

" Find bash
if executable('/bin/bash')
    set shell=/bin/bash
elseif executable('/usr/local/bin/bash')
    set shell=/usr/local/bin/bash
elseif executable('/usr/bin/bash')
    set shell=/usr/bin/bash
else
    set shell=/bin/sh
endif

set showmatch               " show matching brackets (), {}' []
set showcmd                 " show command
set modelines=0             " don't use modelines
set ignorecase              " case-insensitive search
set smartcase               " upper-case sensitive search
set laststatus=2            " occasions to show status line, 2=always.
set hidden                  " move buffer to background without saving
set wrap                    " set long-line wrapping
set textwidth=80            " disable automatic text-width
set history=1000            " more history
set shortmess=atI           " shorten confirmation messages
set bs=2                    " fix backspace in FreeBSD
set scrolloff=3             " keep 3 lines below/above cursor
set noshowmode              " no need for the mode, airline shows it
set showcmd                 " shows partial command in the last line
set ttyfast                 " improves remote connections
set ruler                   " show the line and column number of the cursor
set backspace=indent,eol,start
set nonumber                " don't show line numbering
set undofile                " create undofiles
set formatoptions=qrn1
set cursorline              " show me the line where the cursor is
set nofoldenable            " don't do any folding for now
set guicursor+=a:blinkon0   " don't blink the cursor please

" Enable a .vimrc per project
set exrc                    " enable per-directory .vimrc files
set secure                  " disable unsafe commands in local .vimrc files

" Dictionary on the mac
if has('mac')
    nmap <silent> <Leader>d :!open dict://<cword><CR><CR>
endif

" Ignore these files in netrw
let g:netrw_list_hide= '.*\.swp$,.*\~$,.*\.pyc$'

" Use normal regular expressions
nnoremap / /\v
vnoremap / /\v

" Bash-like filename completion
set wildmenu
set wildmode=list:longest

" Ignore these things
set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX
set wildignore+=*.pyc                            " Python byte code
set wildignore+=*.orig                           " Merge resolution files
set wildignore+=*.beam                           " Erlang object code
set wildignore+=classes                          " java/clojure classes
set wildignore+=cabal-dev                        " cabal
set wildignore+=dist                             " cabal distrubition

" Jumping around
set tags=tags;/,codex.tags;/

" Only show the cursorline on the active window
augroup cline
    au!
    au WinLeave,InsertEnter * set nocursorline
    au WinEnter,InsertLeave * set cursorline
augroup END

" Backup settings
set undodir=~/.vim/tmp/undo//     " undo files
set backupdir=~/.vim/tmp/backup// " backups
set directory=~/.vim/tmp/swap//   " swap files
set backup                        " enable backups
set noswapfile                    " no swapping

" Tagbar
map <C-t> :Tagbar<CR>

" NerdTree
map <C-n> :NERDTreeToggle<CR>
let NERDTreeIgnore=['\~$', '\.pyc', '\.swp$', '\.git', '\.hg', '\.svn',
            \ '\.ropeproject', '\.o', '\.bzr', '\.ipynb_checkpoints', '__pycache__',
            \ '\.egg$', '\.egg-info$', '\.tox$', '\.idea$', '\.sass-cache',
            \ '\.env*$', '\.env[0-9]$', '\.coverage$']

" Faster scrolling
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" Whitespace
set nowrap
set tabstop=4                     " tab width is 4 spaces
set shiftwidth=4                  " indent is also with 4 spaces
set expandtab                     " expand tabs to spaces

" Change mapleader to comma
let mapleader = ","
let maplocalleader = "_"

" Toggle whitespace invisibles
nmap <leader>l :set list!<CR>

" Vimwiki
let g:vimwiki_list = [{'path': '~/wiki/'}]
let g:vimwiki_dir_link = ''                 " open files in netrw


" Go settings
au BufNewFile,BufRead *.go setlocal noet ts=4 sw=4 sts=4
let g:go_highlight_trailing_whitespace_error = 0
let g:go_auto_type_info = 0

au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <Leader>i <Plug>(go-info)
au FileType go nmap <Leader>d <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>gb <Plug>(go-doc-browser)
au FileType go nmap gd <Plug>(go-def)

" Rust settings
let g:racer_cmd = "/home/wunki/rust/racer/target/racer"
let $RUST_SRC_PATH="/home/wunki/rust/rust/src"

" Markdown detection
autocmd BufNewFile,BufReadPost *.mkd,*.markdown,*.md set filetype=markdown

" Textile settings
au BufRead *.tex set tw=79

" Mutt settings
au BufRead ~/.mutt/tmp/mutt-* set tw=72 formatoptions=tcql

" C settings
au FileType C setlocal shiftwidth=4 tabstop=4 softtabstop=4 cindent

" RestructuredText
augroup rst
    autocmd BufRead *.rst set ai tw=79 spell filetype=rst formatoptions=tcroqn2 comments=n:>
augroup END

" JSON
au! BufRead,BufNewFile *.json setfiletype json

" Quickly escape to normal mode
inoremap hh <ESC>

" Quick edit
nnoremap <leader>ev :vsplit $MYVIMRC<cr>

" Line numbers
noremap <f3> :set nu!<cr>
noremap <f4> :set relativenumber!<cr>

" Go up/down a display line, instead of actual line
nnoremap j gj
nnoremap k gk

" Formatting
nnoremap Q gqip
vnoremap Q gq

" Undo tree
nnoremap <F5> :UndotreeToggle<cr>

" Ctrlp
let g:ctrlp_working_path_mode = 0
nnoremap <silent> <C-b> :CtrlPBuffer<cr>

" Fugitive
nnoremap <leader>gd :Gdiff<cr>
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gw :Gwrite<cr>
nnoremap <leader>ga :Gadd<cr>
nnoremap <leader>gb :Gblame<cr>
nnoremap <leader>gco :Gcheckout<cr>
nnoremap <leader>gci :Gcommit<cr>
nnoremap <leader>gm :Gmove<cr>
nnoremap <leader>gr :Gremove<cr>
nnoremap <leader>gv :Gitv<cr>
nnoremap <leader>gp :Git push<cr>

" Org-mode
augroup ft_org
    au!
    au Filetype org nmap <buffer> Q vahjgq
augroup END

" Haskell settings
let g:haddock_browser = "firefox"
let g:haddock_browser_callformat = "%s %s"
let g:ghc="/usr/bin/ghc"
let g:haddock_docdir="/usr/share/doc/ghc/html/"

" Badwolf theme settings
let g:badwolf_darkgutter = 1

" Commentary
nmap <leader>c <Plug>CommentaryLine
xmap <leader>c <Plug>Commentary

augroup plugin_commentary
    au!
    au FileType htmldjango setlocal commentstring={#\ %s\ #}
    au FileType clojurescript setlocal commentstring=;\ %s
    au FileType lisp setlocal commentstring=;\ %s
    au FileType rust setlocal commentstring=//\ %s
    au FileType cf3 setlocal commentstring=\#\ %s
augroup END

" Chicken scheme
let g:is_chicken=1
setl lispwords+=let-values,condition-case,with-input-from-string
setl lispwords+=with-output-to-string,handle-exceptions,call/cc,rec,receive
setl lispwords+=call-with-output-file

" Sessions
set ssop-=options    " do not store global and local values in a session
set ssop-=folds      " do not store folds

" Completion
set complete=.,w,b,u,t
set completeopt=menu,menuone

" Clojure
let g:clojure_align_multiline_strings = 1

" Erlang
au BufRead,BufNewFile rebar.config set filetype=erlang

" Python
let g:pymode_rope_complete_on_dot = 0

" Syntastic
let g:syntastic_echo_current_error = 0
let g:syntastic_enable_highlighting = 0
let g:syntastic_always_populate_loc_list = 1

" Github issues
let g:github_issues_no_omni = 1

" Passwords
let passfile = $HOME."/.vimpass"
if filereadable($passfile)
    source $passfile
end

if has('mac')
    set macmeta               " enable meta key in macvim
endif

" Tagbar
let g:tagbar_type_markdown = {
    \ 'ctagstype' : 'markdown',
    \ 'kinds' : [
        \ 'h:headings',
        \ 'l:links',
        \ 'i:images'
    \],
    \ "sort" : 0
\ }

let g:tagbar_type_rust = {
    \ 'ctagstype' : 'rust',
    \ 'kinds' : [
        \'T:types,type definitions',
        \'f:functions,function definitions',
        \'g:enum,enumeration names',
        \'s:structure names',
        \'m:modules,module names',
        \'c:consts,static constants',
        \'t:traits,traits',
        \'i:impls,trait implementations',
    \  ]
    \}

let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }

" Lightline
let g:lightline = {
            \ 'colorscheme': 'zenburn',
            \ 'active': {
            \   'left': [ [ 'mode', 'paste' ],
            \             [ 'fugitive', 'filename' ] ]
            \ },
            \ 'component_function': {
            \   'fugitive': 'MyFugitive',
            \   'readonly': 'MyReadonly',
            \   'modified': 'MyModified',
            \   'filename': 'MyFilename'
            \ }
            \ }

function! MyModified()
    if &filetype == "help"
        return ""
    elseif &modified
        return "+"
    elseif &modifiable
        return ""
    else
        return ""
    endif
endfunction

function! MyReadonly()
    if &filetype == "help"
        return ""
    elseif &readonly
        return "Lock"
    else
        return ""
    endif
endfunction

function! MyFugitive()
    if exists("*fugitive#head")
        let _ = fugitive#head()
        return strlen(_) ? '[git] '._ : ''
    endif
    return ''
endfunction

function! MyFilename()
    return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
                \ ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
                \ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction
