set cmdheight=2             " lower command line two lines high
set modifiable              " needed for vimpager
set bg=dark                 " dark background
syntax on                   " enable syntax highlighting
filetype plugin indent on

call plug#begin('~/.nvim/plugged')

" Essentials
Plug 'tpope/vim-eunuch'                                  " unix helper commands
Plug 'tpope/vim-repeat'                                  " make the . command available to more plugins
Plug 'tpope/vim-fugitive'                                " git wrapper
Plug 'tpope/vim-unimpaired'                              " bracket mappings for easy jumping
Plug 'tpope/vim-obsession'                               " better vim sessions
Plug 'rking/ag.vim'                                      " silver surfer
Plug 'commentary.vim'                                    " comment mappings
Plug 'surround.vim'                                      " surround commands
Plug 'godlygeek/tabular'                                 " easy indenting
Plug 'tpope/vim-speeddating'                             " increase time and numbers
Plug 'Lokaltog/vim-easymotion'                           " move by selecting a letter
Plug 'scrooloose/syntastic'                              " syntax checker
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }  " sidebar tree
Plug 'mbbill/undotree'                                   " easy undoing
Plug 'jiangmiao/auto-pairs'                              " pair parenthesis, brackend and quotes
Plug 'dhruvasagar/vim-table-mode', { 'for': 'markdown' } " table creation in markdown
Plug 'bronson/vim-trailing-whitespace'                   " remove trailing whitespace
Plug 'majutsushi/tagbar'                                 " sidebar to jump to regions
Plug 'Valloric/YouCompleteMe', { 'do': './install.sh' }  " autocomplete
Plug 'kien/ctrlp.vim'                                    " file browsing
Plug 'bling/vim-airline'
Plug 'chriskempson/base16-vim'

" Go
Plug 'fatih/vim-go', { 'for': 'go' }
Plug 'benmills/vim-golang-alternate', { 'for': 'go' }

" Rust
Plug 'wting/rust.vim', { 'for': 'rust' }
Plug 'phildawes/racer', { 'do': 'cargo build --release', 'for': 'rust' }
Plug 'cespare/vim-toml', { 'for': 'toml' }

call plug#end()

" Visuals
set t_Co=256
set mouse=a
set ttymouse=xterm
set termencoding=utf-8
colors base16-ocean

" Find Shell
if executable('/usr/local/bin/zsh')
    set shell=/usr/local/bin/zsh
elseif executable('/usr/local/bin/bash')
    set shell=/usr/local/bin/bash
elseif executable('/bin/bash')
    set shell=/bin/bash
else
    set shell=/bin/sh
endif

set showmatch               " show matching brackets (), {}' []
set showcmd                 " show command
set modelines=0             " don't use modelines
set ignorecase              " case-insensitive search
set smartcase               " upper-case sensitive search
set laststatus=2            " occasions to show status line, 2=always.
set hidden                  " move buffer to background without saving
set wrap                    " set long-line wrapping
set textwidth=80            " disable automatic text-width
set history=1000            " more history
set shortmess=atI           " shorten confirmation messages
set bs=2                    " fix backspace in FreeBSD
set scrolloff=3             " keep 3 lines below/above cursor
set noshowmode              " no need for the mode, airline shows it
set showcmd                 " shows partial command in the last line
set ruler                   " show the line and column number of the cursor
set backspace=indent,eol,start
set nonumber                " don't show line numbering
set undofile                " create undofiles
set formatoptions=qrn1
set nocursorline            " show me the line where the cursor is
set nofoldenable            " don't do any folding for now
set guicursor+=a:blinkon0   " don't blink the cursor please
set winwidth=79             " resize active window to minimally contains 79 chars width

" ignore these files in netrw
let g:netrw_list_hide= '.*\.swp$,.*\~$,.*\.pyc$'

" Use normal regular expressions
nnoremap / /\v
vnoremap / /\v

" YouCompleteMe
let g:ycm_min_num_of_chars_for_completion = 3
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
let g:ycm_server_keep_logfiles = 1

" Bash-like filename completion
set wildmenu
set wildmode=list:longest

" Ignore these things
set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX
set wildignore+=*.pyc                            " Python byte code
set wildignore+=*.orig                           " Merge resolution files
set wildignore+=*.beam                           " Erlang object code
set wildignore+=classes                          " java/clojure classes
set wildignore+=cabal-dev                        " cabal
set wildignore+=dist                             " cabal distrubition
set wildignore+=*.test                           " ignore Go's tests files

" jumping around
set tags=tags;/,codex.tags;/

" only show the cursorline on the active window
augroup cline
    au!
    au WinLeave,InsertEnter * set nocursorline
    au WinEnter,InsertLeave * set cursorline
augroup END

" backup settings
set undodir=~/.vim/tmp/undo//     " undo files
set backupdir=~/.vim/tmp/backup// " backups
set directory=~/.vim/tmp/swap//   " swap files
set backup                        " enable backups
set noswapfile                    " no swapping

" point neovim to python
let g:python_host_prog='/usr/local/bin/python'

" tagbar
map <C-t> :Tagbar<CR>

" NerdTree
map <C-n> :NERDTreeToggle<CR>
let NERDTreeIgnore=['\~$', '\.pyc', '\.swp$', '\.git', '\.hg', '\.svn',
            \ '\.ropeproject', '\.o', '\.bzr', '\.ipynb_checkpoints', '__pycache__',
            \ '\.egg$', '\.egg-info$', '\.tox$', '\.idea$', '\.sass-cache',
            \ '\.env*$', '\.env[0-9]$', '\.coverage$']

" Faster scrolling
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" Whitespace
set nowrap
set tabstop=4                     " tab width is 4 spaces
set shiftwidth=4                  " indent is also with 4 spaces
set expandtab                     " expand tabs to spaces

" Change mapleader to comma
let mapleader = ","
let maplocalleader = "_"

" Toggle whitespace invisibles
nmap <leader>l :set list!<CR>

" Vimwiki
let g:vimwiki_list = [{'path': '~/wiki/'}]
let g:vimwiki_dir_link = ''                 " open files in netrw

" Go settings
au BufNewFile,BufRead *.go setlocal noet ts=4 sw=4 sts=4
let g:go_fmt_command = "goimports"
let g:go_auto_type_info = 1

au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <Leader>i <Plug>(go-info)
au FileType go nmap <Leader>d <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>gb <Plug>(go-doc-browser)
au FileType go nmap gd <Plug>(go-def)

" Rust settings
let g:racer_cmd = "/home/wunki/.vim/plugged/racer/target/release/cargo"
if has('mac')
    let $RUST_SRC_PATH="/Users/wunki/Rust/rust/src"
else
    let $RUST_SRC_PATH="/home/wunki/rust/rust/src"
end

" Mutt settings
au BufRead ~/.mutt/tmp/mutt-* set tw=72 formatoptions=tcql

" JSON
au! BufRead,BufNewFile *.json setfiletype json

" Quickly escape to normal mode
inoremap hh <ESC>

" Quick edit
nnoremap <leader>ev :vsplit $MYVIMRC<cr>

" Line numbers
noremap <f3> :set nu!<cr>
noremap <f4> :set relativenumber!<cr>

" Go up/down a display line, instead of actual line
nnoremap j gj
nnoremap k gk

" Formatting
nnoremap Q gqip
vnoremap Q gq

" Undo tree
nnoremap <F5> :UndotreeToggle<cr>

" Ctrlp
let g:ctrlp_working_path_mode = 0
nnoremap <silent> <C-b> :CtrlPBuffer<cr>
nnoremap <silent> <C-B> :CtrlPBookmarkDir<cr>

" Fugitive
nnoremap <leader>gd :Gdiff<cr>
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gw :Gwrite<cr>
nnoremap <leader>ga :Gadd<cr>
nnoremap <leader>gb :Gblame<cr>
nnoremap <leader>gco :Gcheckout<cr>
nnoremap <leader>gci :Gcommit<cr>
nnoremap <leader>gm :Gmove<cr>
nnoremap <leader>gr :Gremove<cr>
nnoremap <leader>gv :Gitv<cr>
nnoremap <leader>gp :Git push<cr>

" Commentary
nmap <leader>c <Plug>CommentaryLine
xmap <leader>c <Plug>Commentary

augroup plugin_commentary
    au!
    au FileType htmldjango setlocal commentstring={#\ %s\ #}
    au FileType clojurescript setlocal commentstring=;\ %s
    au FileType lisp setlocal commentstring=;\ %s
    au FileType rust setlocal commentstring=//\ %s
    au FileType cf3 setlocal commentstring=\#\ %s
augroup END

" Completion
set complete=.,w,b,u,t
set completeopt=menu,menuone

" Syntastic
let g:syntastic_echo_current_error = 0
let g:syntastic_enable_highlighting = 0
let g:syntastic_always_populate_loc_list = 1

" Tagbar
let g:tagbar_type_markdown = {
    \ 'ctagstype' : 'markdown',
    \ 'kinds' : [
        \ 'h:headings',
        \ 'l:links',
        \ 'i:images'
    \],
    \ "sort" : 0
\ }

let g:tagbar_type_rust = {
    \ 'ctagstype' : 'rust',
    \ 'kinds' : [
        \'T:types,type definitions',
        \'f:functions,function definitions',
        \'g:enum,enumeration names',
        \'s:structure names',
        \'m:modules,module names',
        \'c:consts,static constants',
        \'t:traits,traits',
        \'i:impls,trait implementations',
    \  ]
    \}

" Airline
let g:airline_powerline_fonts = 1
